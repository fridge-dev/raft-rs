syntax = "proto3";

// Don't change this because src/ depends on it.
package raft;

// =======================================
// Service
// =======================================

// Trying a new convention to see how I like it. Because gRPC error definitions per-RPC is too loose form,
// we take inspiration from rust and force each RPC to return a {RPC}Result<{RPC}Success, {RPC}Error>.
service GrpcRaft {
  rpc RequestVote(ProtoRequestVoteReq) returns (ProtoRequestVoteResult) {}
  rpc AppendEntries(ProtoAppendEntriesReq) returns (ProtoAppendEntriesResult) {}
}

// =======================================
// API Request and Reply messages
// =======================================

// Convention: ALL messages should have prefix "Proto" so in the rust src, it's easy
// to understand which types are generated.

message ProtoRequestVoteReq {
  string client_node_id = 1;
  uint64 term = 2;
  uint64 last_log_entry_index = 3;
  uint64 last_log_entry_term = 4;
}

message ProtoRequestVoteResult {
  ProtoRequestVoteSuccess ok = 1;
  ProtoRequestVoteError err = 2;
}

message ProtoRequestVoteSuccess {
  bool vote_granted = 1;
}

message ProtoRequestVoteError {
  ProtoServerFault service_fault = 1;
}

message ProtoAppendEntriesReq {
  string client_node_id = 1;
  uint64 term = 2;
  uint64 commit_index = 3;
  uint64 previous_log_entry_term = 4;
  uint64 previous_log_entry_index = 5;
  repeated ProtoLogEntry new_entries = 6;
}

message ProtoAppendEntriesResult {
  ProtoAppendEntriesSuccess ok = 1;
  ProtoAppendEntriesError err = 2;
}

message ProtoAppendEntriesSuccess {
  // Empty
}

message ProtoAppendEntriesError {
  ProtoServerFault service_fault = 1;
  ProtoClientStaleTerm stale_term = 2;
  ProtoServerMissingPreviousLog missing_log = 3;
}

// =======================================
// Sub types
// =======================================

message ProtoLogEntry {
  uint64 term = 1;
  bytes data = 2;
}

message ProtoServerFault {
  string message = 1;
}

message ProtoClientStaleTerm {
  uint64 current_term = 1;
}

message ProtoServerMissingPreviousLog {
  // Empty
}
